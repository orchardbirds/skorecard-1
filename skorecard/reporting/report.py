import pandas as pd


def create_report(X, y, column, bucketer):
    """Calculates summary statistics for a bucket generated by a skorecard bucketing object.

    This report currently works for just 1 column at a time.

    Args:
         X (np.array): features
         y (np.array): target
         column (str): column for which you want the report
         bucketer: Skorecard bucket object

    Returns:
        df (pandas DataFrame): reporting df
    """
    X = X.copy()
    X_transform = bucketer.transform(X)
    df = pd.DataFrame(
        {
            "BUCKET": X_transform[column].value_counts().keys(),
            "NUMBER_IN_BUCKET": X_transform[column].value_counts().values,
            "PERCENTAGE_IN_BUCKET": X_transform[column].value_counts(normalize=True).values,
        }
    )
    X_transform["target"] = y

    # Defaults
    tmp = (
        X_transform.groupby([column])["target"].sum().reset_index().rename(columns={column: "BUCKET", "target": "BADS"})
    )

    # Merge defaults
    df = df.merge(tmp, how="left", on="BUCKET")

    # Default rates
    df["DEFAULT_RATE"] = df["BADS"] / df["NUMBER_IN_BUCKET"]  # todo: can we divide by 0 accidentally?

    # Get aggregations
    X_transform[f"{column}_ORIGINAL"] = X[column]
    tmp = X_transform.groupby([column]).agg({f"{column}_ORIGINAL": ["min", "max", "mean"]}).reset_index()

    # Rename due to .agg()
    tmp.columns = ["_".join(c) for c in tmp.columns.ravel()]
    tmp = tmp.rename(columns={f"{column}_": "BUCKET"})  # todo: there must be a cleaner way than this shit

    # Merge aggregations
    df = df.merge(tmp, how="left", on="BUCKET")

    return df
