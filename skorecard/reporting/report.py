import pandas as pd
import numpy as np


def create_report(X, y, column, bucketer, epsilon=0.00001, verbose=False):
    """Calculates summary statistics for a bucket generated by a skorecard bucketing object.

    This report currently works for just 1 column at a time.

    Args:
         X (np.array): features
         y (np.array): target
         column (str): column for which you want the report
         bucketer: Skorecard bucket object

    Returns:
        df (pandas DataFrame): reporting df
    """
    X = X.copy()
    X_transform = bucketer.transform(X)
    bucket_mapping = bucketer.features_bucket_mapping_[column]

    if bucket_mapping.type != "numerical":
        raise NotImplementedError("Currently supporting only numerical buckets")

    thresholds = np.hstack([-np.inf, bucket_mapping.map, np.inf])
    thresh_mins = thresholds[:-1]
    thresh_max = thresholds[1:]

    bins = np.sort(X_transform[column].unique())

    df = pd.DataFrame(
        {
            "Bin id": bins,
            "Min bin": thresh_mins,
            "Max bin": thresh_max,
            "Count": X_transform[column].value_counts().loc[bins].values,
            "Count (%)": X_transform[column].value_counts(normalize=True).loc[bins].values,
        }
    )

    X_transform["target"] = y

    # Default statistics
    tmp = (
        X_transform.groupby([column])["target"]
        .sum()
        .reset_index()
        .rename(columns={column: "Bin id", "target": "Event"})
    )

    # Merge defaults
    df = df.merge(tmp, how="left", on="Bin id")

    df["Non Event"] = df["Count"] - df["Event"]
    # Default rates
    df["Event Rate"] = df["Event"] / df["Count"]  # todo: can we divide by 0 accidentally?

    df["% Event"] = df["Event"] / df["Event"].sum()
    df["% Non Event"] = df["Non Event"] / df["Non Event"].sum()

    df["WoE"] = ((df["% Event"] + epsilon) / (df["% Non Event"] + epsilon)).apply(lambda x: np.log(x))

    df["IV"] = (df["% Event"] - df["% Non Event"]) * df["WoE"]

    if verbose:
        iv_total = df["IV"].sum()
        print(f"IV for {column} = {np.round(iv_total, 4)}")

    return df.sort_values(by="Bin id")
